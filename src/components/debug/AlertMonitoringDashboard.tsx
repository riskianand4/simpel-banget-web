import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { useOptimizedAlerts } from '@/hooks/useOptimizedAlerts';
import { useOptimizedConnectionMonitor } from '@/hooks/useOptimizedConnectionMonitor';
import { globalRequestThrottler } from '@/utils/requestThrottler';
import { AlertTriangle, Wifi, Activity, Clock } from 'lucide-react';

// Debug dashboard to monitor alert and connection performance
export const AlertMonitoringDashboard: React.FC = () => {
  const { 
    alerts, 
    alertStats, 
    isGenerating, 
    error 
  } = useOptimizedAlerts();
  
  const { 
    connectionStatus, 
    metrics, 
    checkConnection 
  } = useOptimizedConnectionMonitor();

  const throttlerStats = globalRequestThrottler.getStats();

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* Alert Stats */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Alerts</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{alertStats.total}</div>
            <div className="text-xs text-muted-foreground">
              {alertStats.critical} critical, {alertStats.unacknowledged} unread
            </div>
            {isGenerating && <Badge variant="secondary">Generating...</Badge>}
          </CardContent>
        </Card>

        {/* Connection Status */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Connection</CardTitle>
            <Wifi className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              <Badge variant={connectionStatus.isOnline ? "default" : "destructive"}>
                {connectionStatus.isOnline ? "Online" : "Offline"}
              </Badge>
            </div>
            <div className="text-xs text-muted-foreground">
              Last check: {connectionStatus.lastCheck?.toLocaleTimeString() || 'Never'}
            </div>
            <Button size="sm" onClick={checkConnection} className="mt-2">
              Test Connection
            </Button>
          </CardContent>
        </Card>

        {/* Performance Metrics */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Performance</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {metrics.latency ? `${Math.round(metrics.latency)}ms` : 'N/A'}
            </div>
            <div className="text-xs text-muted-foreground">
              {metrics.consecutiveFailures} consecutive failures
            </div>
            <Badge variant={metrics.isHealthy ? "default" : "destructive"}>
              {metrics.isHealthy ? "Healthy" : "Unhealthy"}
            </Badge>
          </CardContent>
        </Card>

        {/* Request Throttling */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Throttling</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{throttlerStats.length}</div>
            <div className="text-xs text-muted-foreground">Active endpoints</div>
            {throttlerStats.map(stat => (
              <div key={stat.endpoint} className="text-xs">
                {stat.endpoint}: {stat.count} req/sec
              </div>
            ))}
          </CardContent>
        </Card>
      </div>

      {/* Recent Alerts */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Alerts</CardTitle>
          <CardDescription>Latest alerts generated by the system</CardDescription>
        </CardHeader>
        <CardContent>
          {alerts.length === 0 ? (
            <p className="text-muted-foreground">No alerts generated yet.</p>
          ) : (
            <div className="space-y-2">
              {alerts.slice(0, 5).map(alert => (
                <div key={alert.id} className="flex items-center justify-between p-2 border rounded-lg">
                  <div className="flex-1">
                    <div className="text-sm font-medium">{alert.productName}</div>
                    <div className="text-xs text-muted-foreground">{alert.message}</div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge variant={alert.severity === 'CRITICAL' ? 'destructive' : 'secondary'}>
                      {alert.severity}
                    </Badge>
                    <div className="text-xs text-muted-foreground">
                      {alert.timestamp.toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* System Errors */}
      {error && (
        <Card className="border-destructive">
          <CardHeader>
            <CardTitle className="text-destructive">System Error</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">{error}</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};